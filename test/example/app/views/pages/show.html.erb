

<% content_for :sidebar do %>
  <div id="page-header" refresh="page">
    <h1>You're on page <span id='page-number'><%= @id %></span></h1>
    <p>Click the links below to perform a full page refresh:</p>
    <p><%= link_to "back", :back %> | <%= link_to "next", page_path(@next_id) %></p>
  </div>
  <div id='section-a' refresh='section-a' style="padding: 1em; margin: 1em; background: <%= random_light_rgb() %>; color: black;">
    <span>Section A:</span>
    <span id="random-number-a"><%= rand(1000) %></span>
  </div>
  <div id='section-b' refresh='section-b' style="padding: 1em; margin: 1em; background: <%= random_light_rgb() %>; color: black;">
    <span>Section B:</span>
    <span id="random-number-b"><%= rand(1000) %></span>
  </div>
<% end %>

<section>
  <h1>Partial page refresh</h1>

  <p>Here's a fieldset, vaguely representing some client state.  Enter some values.</p>
  <fieldset>
    <div class="field">
      <%= label_tag :name, "Name" %>
      <%= text_field_tag :name %>
    </div>
    <div class="field">
      <%= label_tag :nickname, "Nickname" %>
      <%= text_field_tag :nickname %>
    </div>
  </fieldset>

  <p>Now click this link to partially refresh only the header of this page.</p>
<div class="prepend-pre">
<a href="#" id="partial-refresh-page" refresh="page" onclick="event.preventDefault(); Page.refresh({
  url: '<%= page_path(@next_id) %>',
  onlyKeys: ['page']
});">Go to next page via partial refresh</a>
</div>
  <p>You'll notice that the content you entered into the fields above did not disappear, even though we did a GET of a new page.  Using the <code>refresh</code> attribute, coupled with an <code>id</code> attribute, we tell TurboGraft to grab the new page, but only refresh elements that have the <code>refresh</code> attribute of <code>page</code>.</p>


  <% @id ||= 1 %>

  <p>Here are some buttons that do the same, but illustrate how your choice of <code>onlyKeys</code> allows you to tell TurboGraft which part of the page to replace.</p>

<div class="prepend-pre">
<button id='refresh-a' href="<%= page_path(@id) %>"
  onclick="event.preventDefault(); Page.refresh({
    url: '<%= page_path(@id) %>',
    onlyKeys: ['section-a']
  });">Refresh Section A</button>
</div>
<div class="prepend-pre">
<button id='refresh-b' href="<%= page_path(@id) %>"
  onclick="event.preventDefault(); Page.refresh({
    url: '<%= page_path(@id) %>',
    onlyKeys: ['section-b']
  });">Refresh Section B</button>
</div>
<div class="prepend-pre">
<button id='refresh-a-and-b' href="<%= page_path(@id) %>"
  onclick="event.preventDefault(); Page.refresh({
    url: '<%= page_path(@id) %>',
    onlyKeys: ['section-a', 'section-b']
  });">Refresh Section A and B</button>
</div>

  <p>It's a bit ugly and cumbersome to need to write an <code>onclick</code> handler like this, so instead, we provide a helper that does the same thing:</p>
<div class="prepend-pre">
<button href="<%= page_path(@id) %>" partial-graft refresh="section-a section-b">Partial Graft Helper: A and B</button>
</div>

  <p>Just add the attribute, <code>partial-graft</code>.</p>


</section>

<section>
  <h1>refresh-never</h1>
  <div>
    <p>If you add the <code>refresh-never</code> attribute to a node, it will only show up in the <code>body</code> of the document once.  This is useful when you want to include and initialize a tracking script just once inside the body, and never have it fire again.</p>
  </div>
<div class="prepend-pre">
<div refresh-never>
  <p><strong><%= link_to "I should never be refreshed.  I will disappear after a full page refresh.", page_path(@next_id), id: "next-page-refresh-never", refresh: "page" %></strong></p>
</div>
</div>
  <p>This is useful for tracking pixels or scripts that you wish to only include into the page once.</p>

</section>

<section>
  <h1>Encountering HTTP Errors:</h1>
  <p>TurboGraft plays nicely with 404 and 500, and other errors.</p>
  <p>
    <%= link_to "I will throw an error 500", error_500_pages_path %>
  </p>
  <p>
    <%= link_to "I will throw an error 404", error_404_pages_path %>
  </p>
  <p>When you hit the back button of your browser after clicking the link above, you will see this page again.</p>
</section>

<section>
  <h1>Re-directing after a POST</h1>
  <p>This button below performs a standard form POST:</p>
<div class="prepend-pre">
<%= form_tag redirect_to_somewhere_else_after_POST_pages_path, method: "POST" do %>
  <%= button_tag "Redirect to somewhere else after POST", type: :submit  %>
<% end %>
</div>

  <p>This button below performs a POST via XHR, then uses <code>Page.refresh</code> to reload the page with the response:</p>

<div class="prepend-pre">
<script>
  window.postToXHR = function() {
    operation = $.ajax({
      type: "POST",
      url: "<%= redirect_to_somewhere_else_after_POST_pages_path %>",
      data: {}
    });

    operation.done(function(results, status, xhr) {
      Page.refresh({response: xhr, onlyKeys: ["page"]})
    });
  };
</script>
<%= button_tag "Post via XHR and see X-XHR-Redirected-To", type: :submit, onclick: "postToXHR()" %>
</div>

  <p>You'll notice that your scrolling position doesn't change, unlike the button above, but the location in your URL bar will.</p>
</section>

<section>
  <h1>remote-method</h1>
  <p>This provides functionality similar to rails version of link_to for methods other than GET, allowing you to query methods on different endpoints, and partial page replacing different refresh keys depending on the response status.</p>
  <p>It requires your node to be marked up with:</p>
  <ul>
    <li><code>remote-method</code>: the HTTP method you wish to call on your endpoint</li>
    <li><code>href</code>: the URL of the endpoint you wish to hit</li>
    <li><code>refresh-on-success</code>: (optional, but you'll almost always want it) which refresh keys will get refreshed, using the body of the response. This is space-delimited</li>
    <li><code>refresh-on-error</code>: (optional) see above, but using body of XHR that has failed.  Only works with error 422</li>
    <li><code>remote-once</code>: (optional) Only do this once. Removes remote-method and remote-once from element after consumption</li>
    <li><code>full-refresh</code>: Instead of using the content of the XHR response for partial page replacement, we will instead re-GET the URL in question.  Defaults to <code>true</code> if neither <code>refresh-on-success</code> nor <code>refresh-on-error</code> are provided.</li>
  </ul>
  <p>It emits a few events:</p>
  <ul>
    <li><code>turbograft:remote:start</code>: before XHR is sent</li>
    <li><code>turbograft:remote:always</code>: always fires when XHR is done</li>
    <li><code>turbograft:remote:success</code>: always fires when XHR was successful</li>
    <li><code>turbograft:remote:fail</code>: always fires when XHR failed</li>
    <li><code>turbograft:remote:fail:unhandled</code>: fires after the above event, but when we didn't partially replace anything with refresh-on-error (because there was no refresh-on-error supplied)</li>
  </ul>
  <p>Each event also is sent with a copy of the xhr in case you need to look at anything in there, as well as a reference to the element that initated the remote-method.</p>


<div class="prepend-pre">
<a href="<%= page_path(rand(100)) %>" remote-method="GET" refresh-on-success="page section-a section-b">remote-method GET to response of 200</a>
</div>

<div class="prepend-pre">
<a href="<%= error_422_pages_path %>" remote-method="GET" refresh-on-error="page">remote-method GET to response of 422</a>
</div>

<div class="prepend-pre">
<a href="<%= error_404_pages_path %>" remote-method="GET">remote-method GET to response of 404</a>
</div>
  <p><code>refresh-on-error</code> only works for error 422.  This is mainly so you can refresh certain a part of a form (e.g., validation error div) when returning 422.  Nothing changes if the XHR errors out if you do not supply a <code>refresh-on-error</code>.</p>
</section>

<section>
  <h1>remote-form</h1>
  <p>It requires your <code>form</code> to be marked up with:</p>
  <ul>
    <li><code>remote-form</code>: an attribute that doesn't need a value</li>
    <li><code>action</code>: you should have one of these already</li>
    <li><code>method</code>: you should have one of these already</li>
    <li><code>refresh-on-success</code>: (optional, but you'll almost always want it) which refresh keys will get refreshed, using the body of the response. This is space-delimited</li>
    <li><code>refresh-on-error</code>: (optional) see above, but using body of XHR that has failed.  Only works with error 422</li>
    <li><code>full-refresh</code>: Instead of using the content of the XHR response for partial page replacement, we will instead re-GET the URL in question.  Defaults to <code>true</code> if neither <code>refresh-on-success</code> nor <code>refresh-on-error</code> are provided.</li>
  </ul>
  <p>It emits a few events:</p>
  <ul>
    <li><code>turbograft:remote:start</code>: before XHR is sent</li>
    <li><code>turbograft:remote:always</code>: always fires when XHR is done</li>
    <li><code>turbograft:remote:success</code>: always fires when XHR was successful</li>
    <li><code>turbograft:remote:fail</code>: always fires when XHR failed</li>
    <li><code>turbograft:remote:fail:unhandled</code>: fires after the above event, but when we didn't partially replace anything with refresh-on-error (because there was no refresh-on-error supplied)</li>
  </ul>

<div class="prepend-pre">
<div id="foo-results" refresh="foo-results">
  Use the field below to submit some content, and get a result.
</div>
<form remote-form action="/pages/submit_foo" method="post" refresh-on-success="foo-results foo-errors" refresh-on-error="foo-results foo-errors">
  <input name="foo" type="text">
  <button type="submit">Submit</button>
</form>
</div>
</section>

<section>
  <h1>Other features</h1>
  <%= link_to "Perform a full navigation to learn more", html_with_noscript_pages_path %>
</section>
